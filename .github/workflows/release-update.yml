name: Update release with new tag and

on:
  workflow_dispatch:
  workflow_call:
    # inputs:
    #   asset_creating_script:
    #     required: true
    #     type: string
    #   asset_files:
    #     required: true
    #     type: string

jobs:
  update_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: 'Add last commit message to env'
        run: |
          last_commit_message=$(git log -1 --pretty=format:"%s")
          echo "LAST_COMMIT_MESSAGE="${last_commit_message}"" >> $GITHUB_ENV
      - name: 'test 1'
        run: |
          cat $GITHUB_ENV

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ env.LAST_COMMIT_MESSAGE }}
          # Matches -r flag value, only M m and p characters
          regex: '(?<=(-r))[ |:|\\]*(?<value>[M|m|p]*)(?=[ |\\]|$)'
          # retreive flag value with ${{ steps.regex-match.outputs.group1 }}

      - uses: actions-ecosystem/action-get-latest-tag@v1
        if: ${{ steps.regex-match.outputs.match != '' }}
        id: get-latest-tag
      - name: 'Add last tag to env'
        if: ${{ steps.regex-match.outputs.match != '' }}
        run: |
          echo ${{ steps.get-latest-tag.outputs.tag }}
          echo "LAST_TAG=${{ steps.get-latest-tag.outputs.tag }}" 
          echo "LAST_TAG=${{ steps.get-latest-tag.outputs.tag }}" >> $GITHUB_ENV
          cat $GITHUB_ENV
      - name: 'test 2'
        run: |
          cat $GITHUB_ENV

      - uses: actions-ecosystem/action-bump-semver@v1
        if: ${{ steps.regex-match.outputs.match != '' 
                && contains(steps.regex-match.outputs.match, 'p') }}
        id: bump-semver-patch
        with:
          current_version: ${{ env.LAST_TAG }}
          level: patch
      - name: 'Add last tag to env'
        if: ${{ steps.regex-match.outputs.match != '' 
                && contains(steps.regex-match.outputs.match, 'p') }}
        run: |
          echo "LAST_TAG=${{ steps.bump-semver-patch.outputs.new_version }}" >> $GITHUB_ENV

      - uses: actions-ecosystem/action-bump-semver@v1
        if: ${{ steps.regex-match.outputs.match != '' 
                && contains(steps.regex-match.outputs.match, 'm') }}
        id: bump-semver-minor
        with:
          current_version: ${{ env.LAST_TAG }}
          level: minor
      - name: 'Add last tag to env'
        if: ${{ steps.regex-match.outputs.match != '' 
                && contains(steps.regex-match.outputs.match, 'm') }}
        run: |
          echo "LAST_TAG=${{ steps.bump-semver-minor.outputs.new_version }}" >> $GITHUB_ENV

      - uses: actions-ecosystem/action-bump-semver@v1
        if: ${{ steps.regex-match.outputs.match != '' 
                && contains(steps.regex-match.outputs.match, 'M') }}
        id: bump-semver-major
        with:
          current_version: ${{ env.LAST_TAG }}
          level: major
      - name: 'Add last tag to env'
        if: ${{ steps.regex-match.outputs.match != '' 
                && contains(steps.regex-match.outputs.match, 'M') }}
        run: |
          echo "LAST_TAG=${{ steps.bump-semver-major.outputs.new_version }}" >> $GITHUB_ENV

      - name: "Create environemnt variable"
        run: |
          echo "commit match ${{ steps.regex-match.outputs.match }}"
          echo "release tag ${LAST_TAG}"

      # - uses: meeDamian/github-release@2.0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ env.MY_CUSTOM_TAG }}
      #     name: My Creative Name
      #     body: >
      #       This release actually changes the fabric of the reality, so be careful
      #       while applying, as error in database migration, can irrecoverably wipe
      #       some laws of physics.
      #     gzip: folders
      #     files: >
      #       Dockerfile
      #       action.yml
      #     .github/
      #       license:LICENSE
      #       work-flows:.github/
